//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  post: Post;
  postConnection: PostConnection;
  contentPost: ContentPost;
  contentPostConnection: ContentPostConnection;
  sidebarConfig: SidebarConfig;
  sidebarConfigConnection: SidebarConfigConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryContentPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContentPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContentPostFilter>;
};


export type QuerySidebarConfigArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySidebarConfigConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SidebarConfigFilter>;
};

export type DocumentFilter = {
  post?: InputMaybe<PostFilter>;
  contentPost?: InputMaybe<ContentPostFilter>;
  sidebarConfig?: InputMaybe<SidebarConfigFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Post | ContentPost | SidebarConfig | Folder;

export type PostAuthor = {
  __typename?: 'PostAuthor';
  name: Scalars['String']['output'];
  picture: Scalars['String']['output'];
};

export type PostOgImage = {
  __typename?: 'PostOgImage';
  url: Scalars['String']['output'];
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  excerpt: Scalars['String']['output'];
  coverImage: Scalars['String']['output'];
  date: Scalars['String']['output'];
  author?: Maybe<PostAuthor>;
  ogImage?: Maybe<PostOgImage>;
  publishedAt?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  summary?: Maybe<Scalars['String']['output']>;
  banner?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
  mathjax?: Maybe<Scalars['Boolean']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PostAuthorFilter = {
  name?: InputMaybe<StringFilter>;
  picture?: InputMaybe<ImageFilter>;
};

export type PostOgImageFilter = {
  url?: InputMaybe<ImageFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  date?: InputMaybe<DatetimeFilter>;
  author?: InputMaybe<PostAuthorFilter>;
  ogImage?: InputMaybe<PostOgImageFilter>;
  publishedAt?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  summary?: InputMaybe<StringFilter>;
  banner?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  mathjax?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type ContentPostAuthor = {
  __typename?: 'ContentPostAuthor';
  name: Scalars['String']['output'];
  picture: Scalars['String']['output'];
};

export type ContentPostOgImage = {
  __typename?: 'ContentPostOgImage';
  url: Scalars['String']['output'];
};

export type ContentPost = Node & Document & {
  __typename?: 'ContentPost';
  title: Scalars['String']['output'];
  excerpt: Scalars['String']['output'];
  coverImage: Scalars['String']['output'];
  date: Scalars['String']['output'];
  author?: Maybe<ContentPostAuthor>;
  ogImage?: Maybe<ContentPostOgImage>;
  publishedAt?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  summary?: Maybe<Scalars['String']['output']>;
  banner?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
  mathjax?: Maybe<Scalars['Boolean']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContentPostAuthorFilter = {
  name?: InputMaybe<StringFilter>;
  picture?: InputMaybe<ImageFilter>;
};

export type ContentPostOgImageFilter = {
  url?: InputMaybe<ImageFilter>;
};

export type ContentPostFilter = {
  title?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  date?: InputMaybe<DatetimeFilter>;
  author?: InputMaybe<ContentPostAuthorFilter>;
  ogImage?: InputMaybe<ContentPostOgImageFilter>;
  publishedAt?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  summary?: InputMaybe<StringFilter>;
  banner?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  mathjax?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ContentPostConnectionEdges = {
  __typename?: 'ContentPostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ContentPost>;
};

export type ContentPostConnection = Connection & {
  __typename?: 'ContentPostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContentPostConnectionEdges>>>;
};

export type SidebarConfigProfile = {
  __typename?: 'SidebarConfigProfile';
  firstName: Scalars['String']['output'];
  lastName: Scalars['String']['output'];
  preferredName?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  avatar: Scalars['String']['output'];
};

export type SidebarConfigContacts = {
  __typename?: 'SidebarConfigContacts';
  title: Scalars['String']['output'];
  content: Scalars['String']['output'];
  link?: Maybe<Scalars['String']['output']>;
  icon: Scalars['String']['output'];
};

export type SidebarConfigSocialLinks = {
  __typename?: 'SidebarConfigSocialLinks';
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  icon: Scalars['String']['output'];
};

export type SidebarConfig = Node & Document & {
  __typename?: 'SidebarConfig';
  profile?: Maybe<SidebarConfigProfile>;
  contacts?: Maybe<Array<Maybe<SidebarConfigContacts>>>;
  socialLinks?: Maybe<Array<Maybe<SidebarConfigSocialLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SidebarConfigProfileFilter = {
  firstName?: InputMaybe<StringFilter>;
  lastName?: InputMaybe<StringFilter>;
  preferredName?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
};

export type SidebarConfigContactsFilter = {
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type SidebarConfigSocialLinksFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type SidebarConfigFilter = {
  profile?: InputMaybe<SidebarConfigProfileFilter>;
  contacts?: InputMaybe<SidebarConfigContactsFilter>;
  socialLinks?: InputMaybe<SidebarConfigSocialLinksFilter>;
};

export type SidebarConfigConnectionEdges = {
  __typename?: 'SidebarConfigConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SidebarConfig>;
};

export type SidebarConfigConnection = Connection & {
  __typename?: 'SidebarConfigConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SidebarConfigConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePost: Post;
  createPost: Post;
  updateContentPost: ContentPost;
  createContentPost: ContentPost;
  updateSidebarConfig: SidebarConfig;
  createSidebarConfig: SidebarConfig;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateContentPostArgs = {
  relativePath: Scalars['String']['input'];
  params: ContentPostMutation;
};


export type MutationCreateContentPostArgs = {
  relativePath: Scalars['String']['input'];
  params: ContentPostMutation;
};


export type MutationUpdateSidebarConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SidebarConfigMutation;
};


export type MutationCreateSidebarConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SidebarConfigMutation;
};

export type DocumentUpdateMutation = {
  post?: InputMaybe<PostMutation>;
  contentPost?: InputMaybe<ContentPostMutation>;
  sidebarConfig?: InputMaybe<SidebarConfigMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  post?: InputMaybe<PostMutation>;
  contentPost?: InputMaybe<ContentPostMutation>;
  sidebarConfig?: InputMaybe<SidebarConfigMutation>;
};

export type PostAuthorMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
};

export type PostOgImageMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<PostAuthorMutation>;
  ogImage?: InputMaybe<PostOgImageMutation>;
  publishedAt?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  summary?: InputMaybe<Scalars['String']['input']>;
  banner?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  mathjax?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ContentPostAuthorMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
};

export type ContentPostOgImageMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ContentPostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<ContentPostAuthorMutation>;
  ogImage?: InputMaybe<ContentPostOgImageMutation>;
  publishedAt?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  summary?: InputMaybe<Scalars['String']['input']>;
  banner?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  mathjax?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SidebarConfigProfileMutation = {
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  preferredName?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
};

export type SidebarConfigContactsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type SidebarConfigSocialLinksMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type SidebarConfigMutation = {
  profile?: InputMaybe<SidebarConfigProfileMutation>;
  contacts?: InputMaybe<Array<InputMaybe<SidebarConfigContactsMutation>>>;
  socialLinks?: InputMaybe<Array<InputMaybe<SidebarConfigSocialLinksMutation>>>;
};

export type PostPartsFragment = { __typename: 'Post', title: string, excerpt: string, coverImage: string, date: string, publishedAt?: string | null, category?: string | null, tags?: Array<string | null> | null, summary?: string | null, banner?: string | null, alt?: string | null, mathjax?: boolean | null, body?: any | null, author?: { __typename: 'PostAuthor', name: string, picture: string } | null, ogImage?: { __typename: 'PostOgImage', url: string } | null };

export type ContentPostPartsFragment = { __typename: 'ContentPost', title: string, excerpt: string, coverImage: string, date: string, publishedAt?: string | null, category?: string | null, tags?: Array<string | null> | null, summary?: string | null, banner?: string | null, alt?: string | null, mathjax?: boolean | null, body?: any | null, author?: { __typename: 'ContentPostAuthor', name: string, picture: string } | null, ogImage?: { __typename: 'ContentPostOgImage', url: string } | null };

export type SidebarConfigPartsFragment = { __typename: 'SidebarConfig', profile?: { __typename: 'SidebarConfigProfile', firstName: string, lastName: string, preferredName?: string | null, status: string, avatar: string } | null, contacts?: Array<{ __typename: 'SidebarConfigContacts', title: string, content: string, link?: string | null, icon: string } | null> | null, socialLinks?: Array<{ __typename: 'SidebarConfigSocialLinks', name: string, url: string, icon: string } | null> | null };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, excerpt: string, coverImage: string, date: string, publishedAt?: string | null, category?: string | null, tags?: Array<string | null> | null, summary?: string | null, banner?: string | null, alt?: string | null, mathjax?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename: 'PostAuthor', name: string, picture: string } | null, ogImage?: { __typename: 'PostOgImage', url: string } | null } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, excerpt: string, coverImage: string, date: string, publishedAt?: string | null, category?: string | null, tags?: Array<string | null> | null, summary?: string | null, banner?: string | null, alt?: string | null, mathjax?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename: 'PostAuthor', name: string, picture: string } | null, ogImage?: { __typename: 'PostOgImage', url: string } | null } | null } | null> | null } };

export type ContentPostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContentPostQuery = { __typename?: 'Query', contentPost: { __typename: 'ContentPost', id: string, title: string, excerpt: string, coverImage: string, date: string, publishedAt?: string | null, category?: string | null, tags?: Array<string | null> | null, summary?: string | null, banner?: string | null, alt?: string | null, mathjax?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename: 'ContentPostAuthor', name: string, picture: string } | null, ogImage?: { __typename: 'ContentPostOgImage', url: string } | null } };

export type ContentPostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContentPostFilter>;
}>;


export type ContentPostConnectionQuery = { __typename?: 'Query', contentPostConnection: { __typename?: 'ContentPostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContentPostConnectionEdges', cursor: string, node?: { __typename: 'ContentPost', id: string, title: string, excerpt: string, coverImage: string, date: string, publishedAt?: string | null, category?: string | null, tags?: Array<string | null> | null, summary?: string | null, banner?: string | null, alt?: string | null, mathjax?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename: 'ContentPostAuthor', name: string, picture: string } | null, ogImage?: { __typename: 'ContentPostOgImage', url: string } | null } | null } | null> | null } };

export type SidebarConfigQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SidebarConfigQuery = { __typename?: 'Query', sidebarConfig: { __typename: 'SidebarConfig', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, profile?: { __typename: 'SidebarConfigProfile', firstName: string, lastName: string, preferredName?: string | null, status: string, avatar: string } | null, contacts?: Array<{ __typename: 'SidebarConfigContacts', title: string, content: string, link?: string | null, icon: string } | null> | null, socialLinks?: Array<{ __typename: 'SidebarConfigSocialLinks', name: string, url: string, icon: string } | null> | null } };

export type SidebarConfigConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SidebarConfigFilter>;
}>;


export type SidebarConfigConnectionQuery = { __typename?: 'Query', sidebarConfigConnection: { __typename?: 'SidebarConfigConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SidebarConfigConnectionEdges', cursor: string, node?: { __typename: 'SidebarConfig', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, profile?: { __typename: 'SidebarConfigProfile', firstName: string, lastName: string, preferredName?: string | null, status: string, avatar: string } | null, contacts?: Array<{ __typename: 'SidebarConfigContacts', title: string, content: string, link?: string | null, icon: string } | null> | null, socialLinks?: Array<{ __typename: 'SidebarConfigSocialLinks', name: string, url: string, icon: string } | null> | null } | null } | null> | null } };

export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  excerpt
  coverImage
  date
  author {
    __typename
    name
    picture
  }
  ogImage {
    __typename
    url
  }
  publishedAt
  category
  tags
  summary
  banner
  alt
  mathjax
  body
}
    `;
export const ContentPostPartsFragmentDoc = gql`
    fragment ContentPostParts on ContentPost {
  __typename
  title
  excerpt
  coverImage
  date
  author {
    __typename
    name
    picture
  }
  ogImage {
    __typename
    url
  }
  publishedAt
  category
  tags
  summary
  banner
  alt
  mathjax
  body
}
    `;
export const SidebarConfigPartsFragmentDoc = gql`
    fragment SidebarConfigParts on SidebarConfig {
  __typename
  profile {
    __typename
    firstName
    lastName
    preferredName
    status
    avatar
  }
  contacts {
    __typename
    title
    content
    link
    icon
  }
  socialLinks {
    __typename
    name
    url
    icon
  }
}
    `;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const ContentPostDocument = gql`
    query contentPost($relativePath: String!) {
  contentPost(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContentPostParts
  }
}
    ${ContentPostPartsFragmentDoc}`;
export const ContentPostConnectionDocument = gql`
    query contentPostConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContentPostFilter) {
  contentPostConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContentPostParts
      }
    }
  }
}
    ${ContentPostPartsFragmentDoc}`;
export const SidebarConfigDocument = gql`
    query sidebarConfig($relativePath: String!) {
  sidebarConfig(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SidebarConfigParts
  }
}
    ${SidebarConfigPartsFragmentDoc}`;
export const SidebarConfigConnectionDocument = gql`
    query sidebarConfigConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SidebarConfigFilter) {
  sidebarConfigConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SidebarConfigParts
      }
    }
  }
}
    ${SidebarConfigPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    contentPost(variables: ContentPostQueryVariables, options?: C): Promise<{data: ContentPostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentPostQueryVariables, query: string}> {
        return requester<{data: ContentPostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentPostQueryVariables, query: string}, ContentPostQueryVariables>(ContentPostDocument, variables, options);
      },
    contentPostConnection(variables?: ContentPostConnectionQueryVariables, options?: C): Promise<{data: ContentPostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentPostConnectionQueryVariables, query: string}> {
        return requester<{data: ContentPostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentPostConnectionQueryVariables, query: string}, ContentPostConnectionQueryVariables>(ContentPostConnectionDocument, variables, options);
      },
    sidebarConfig(variables: SidebarConfigQueryVariables, options?: C): Promise<{data: SidebarConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SidebarConfigQueryVariables, query: string}> {
        return requester<{data: SidebarConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SidebarConfigQueryVariables, query: string}, SidebarConfigQueryVariables>(SidebarConfigDocument, variables, options);
      },
    sidebarConfigConnection(variables?: SidebarConfigConnectionQueryVariables, options?: C): Promise<{data: SidebarConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SidebarConfigConnectionQueryVariables, query: string}> {
        return requester<{data: SidebarConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SidebarConfigConnectionQueryVariables, query: string}, SidebarConfigConnectionQueryVariables>(SidebarConfigConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  