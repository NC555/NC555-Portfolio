# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  contentPost(relativePath: String): ContentPost!
  contentPostConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContentPostFilter): ContentPostConnection!
  sidebarConfig(relativePath: String): SidebarConfig!
  sidebarConfigConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SidebarConfigFilter): SidebarConfigConnection!
}

input DocumentFilter {
  post: PostFilter
  contentPost: ContentPostFilter
  sidebarConfig: SidebarConfigFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | ContentPost | SidebarConfig | Folder

type PostAuthor {
  name: String!
  picture: String!
}

type PostOgImage {
  url: String!
}

type Post implements Node & Document {
  title: String!
  excerpt: String!
  coverImage: String!
  date: String!
  author: PostAuthor
  ogImage: PostOgImage
  publishedAt: String
  category: String
  tags: [String]
  summary: String
  banner: String
  alt: String
  mathjax: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostAuthorFilter {
  name: StringFilter
  picture: ImageFilter
}

input PostOgImageFilter {
  url: ImageFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  excerpt: StringFilter
  coverImage: ImageFilter
  date: DatetimeFilter
  author: PostAuthorFilter
  ogImage: PostOgImageFilter
  publishedAt: StringFilter
  category: StringFilter
  tags: StringFilter
  summary: StringFilter
  banner: ImageFilter
  alt: StringFilter
  mathjax: BooleanFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type ContentPostAuthor {
  name: String!
  picture: String!
}

type ContentPostOgImage {
  url: String!
}

type ContentPost implements Node & Document {
  title: String!
  excerpt: String!
  coverImage: String!
  date: String!
  author: ContentPostAuthor
  ogImage: ContentPostOgImage
  publishedAt: String
  category: String
  tags: [String]
  summary: String
  banner: String
  alt: String
  mathjax: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContentPostAuthorFilter {
  name: StringFilter
  picture: ImageFilter
}

input ContentPostOgImageFilter {
  url: ImageFilter
}

input ContentPostFilter {
  title: StringFilter
  excerpt: StringFilter
  coverImage: ImageFilter
  date: DatetimeFilter
  author: ContentPostAuthorFilter
  ogImage: ContentPostOgImageFilter
  publishedAt: StringFilter
  category: StringFilter
  tags: StringFilter
  summary: StringFilter
  banner: ImageFilter
  alt: StringFilter
  mathjax: BooleanFilter
  body: RichTextFilter
}

type ContentPostConnectionEdges {
  cursor: String!
  node: ContentPost
}

type ContentPostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContentPostConnectionEdges]
}

type SidebarConfigProfile {
  firstName: String!
  lastName: String!
  preferredName: String
  status: String!
  avatar: String!
}

type SidebarConfigContacts {
  title: String!
  content: String!
  link: String
  icon: String!
}

type SidebarConfigSocialLinks {
  name: String!
  url: String!
  icon: String!
}

type SidebarConfig implements Node & Document {
  profile: SidebarConfigProfile
  contacts: [SidebarConfigContacts]
  socialLinks: [SidebarConfigSocialLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SidebarConfigProfileFilter {
  firstName: StringFilter
  lastName: StringFilter
  preferredName: StringFilter
  status: StringFilter
  avatar: ImageFilter
}

input SidebarConfigContactsFilter {
  title: StringFilter
  content: StringFilter
  link: StringFilter
  icon: StringFilter
}

input SidebarConfigSocialLinksFilter {
  name: StringFilter
  url: StringFilter
  icon: StringFilter
}

input SidebarConfigFilter {
  profile: SidebarConfigProfileFilter
  contacts: SidebarConfigContactsFilter
  socialLinks: SidebarConfigSocialLinksFilter
}

type SidebarConfigConnectionEdges {
  cursor: String!
  node: SidebarConfig
}

type SidebarConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SidebarConfigConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateContentPost(relativePath: String!, params: ContentPostMutation!): ContentPost!
  createContentPost(relativePath: String!, params: ContentPostMutation!): ContentPost!
  updateSidebarConfig(relativePath: String!, params: SidebarConfigMutation!): SidebarConfig!
  createSidebarConfig(relativePath: String!, params: SidebarConfigMutation!): SidebarConfig!
}

input DocumentUpdateMutation {
  post: PostMutation
  contentPost: ContentPostMutation
  sidebarConfig: SidebarConfigMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  contentPost: ContentPostMutation
  sidebarConfig: SidebarConfigMutation
}

input PostAuthorMutation {
  name: String
  picture: String
}

input PostOgImageMutation {
  url: String
}

input PostMutation {
  title: String
  excerpt: String
  coverImage: String
  date: String
  author: PostAuthorMutation
  ogImage: PostOgImageMutation
  publishedAt: String
  category: String
  tags: [String]
  summary: String
  banner: String
  alt: String
  mathjax: Boolean
  body: JSON
}

input ContentPostAuthorMutation {
  name: String
  picture: String
}

input ContentPostOgImageMutation {
  url: String
}

input ContentPostMutation {
  title: String
  excerpt: String
  coverImage: String
  date: String
  author: ContentPostAuthorMutation
  ogImage: ContentPostOgImageMutation
  publishedAt: String
  category: String
  tags: [String]
  summary: String
  banner: String
  alt: String
  mathjax: Boolean
  body: JSON
}

input SidebarConfigProfileMutation {
  firstName: String
  lastName: String
  preferredName: String
  status: String
  avatar: String
}

input SidebarConfigContactsMutation {
  title: String
  content: String
  link: String
  icon: String
}

input SidebarConfigSocialLinksMutation {
  name: String
  url: String
  icon: String
}

input SidebarConfigMutation {
  profile: SidebarConfigProfileMutation
  contacts: [SidebarConfigContactsMutation]
  socialLinks: [SidebarConfigSocialLinksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
